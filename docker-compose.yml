version: '3.8' # Specifies the Compose file version

services:
  # Backend Service
  backend:
    container_name: myapp-backend # Optional: give the container a specific name
    build: ./backend # Tell Compose where to find the backend Dockerfile
    # If your backend needs environment variables (like database connection string)
    # env_file:
    #   - .env
    # ports: # Only expose ports if you need DIRECT access (usually not needed, Nginx handles it)
      # - "5000:5000"
    volumes:
      # Optional: Mount code for development (reflects changes without rebuild)
      # - ./backend:/app
      # - /app/node_modules # Don't mount node_modules from host
      - backend_logs:/app/logs # Example: mount logs volume
    networks:
      - app-network # Connect to the custom network
    restart: unless-stopped # Restart policy

  # Frontend Service (using the multi-stage Dockerfile from Step 2)
  frontend:
    container_name: myapp-frontend
    build: ./frontend # Tell Compose where to find the frontend Dockerfile
    volumes:
      - frontend_static:/usr/share/nginx/html # Mount the built files volume
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy Service
  nginx:
    container_name: myapp-nginx
    image: nginx:1.25-alpine # Use a standard Nginx image
    ports:
      - "80:80" # Map port 80 on your host machine to port 80 in the Nginx container
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Mount your custom config (read-only)
      - frontend_static:/usr/share/nginx/html:ro # Mount the static files from the frontend volume (read-only)
    depends_on: # Wait for backend and frontend service containers (doesn't guarantee app readiness)
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  # --- Optional: Database Service Example (PostgreSQL) ---
  # db:
  #   image: postgres:15-alpine
  #   container_name: myapp-db
  #   environment:
  #     POSTGRES_DB: myappdb
  #     POSTGRES_USER: myappuser
  #     POSTGRES_PASSWORD: replace_with_strong_password # Use .env file for secrets!
  #   volumes:
  #     - db_data:/var/lib/postgresql/data # Persist database data
  #   networks:
  #     - app-network
  #   restart: unless-stopped

# Define the network containers will use to communicate
networks:
  app-network:
    driver: bridge

# Define named volumes for persistent data
volumes:
  frontend_static: # Volume to hold built frontend files
  backend_logs: # Example volume for backend logs
  # db_data: # Volume for database data persistence

